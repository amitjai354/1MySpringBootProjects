spring.application.name=demoTcsArtWorkNov23Innovator

#spring.jpa.defer-datasource-initialization=true
#above one given by tcs only, table created later so no table error now after SB2.5
#By default, the data.sql scripts are now run before Hibernate is initialized. SB 2.5
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2
server.port=8080

#with above configurations h2-console main page opening but after that forbidden 403
#we have to disable csrf for this /h2-console as this is post api type , may change data by running
#insert and update query
#my properties are below ones spring then jpa then hibernate then ddl-auto
#spring.jpa.hibernate.ddl-auto=create

#everywhere spring.jpa then other things
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

#spring.h2.console.path=/h2
#spring.sql.init.mode=always


#server.error.include-message=always
#server.error.include-binding-errors=always
#this is for returning message in authentication entry point

#my new properties--------------------------------------
#spring.datasource.url=jdbc:h2:mem:testdb;NON_KEYWORDS=user : if table name User then not creating table
# ; Separates the database name from additional connection options.
# NON_KEYWORDS=user: This option tells H2 to treat "user" as a non-keyword. This is typically used when 
#you have a table or column named "user" in your schema, which is a reserved keyword in some SQL standards
# and could lead to syntax errors without this option. By adding NON_KEYWORDS=user, you are explicitly 
#allowing the use of "user" as an identifier without requiring it to be quoted in SQL queries.
spring.datasource.url = jdbc:h2:mem:testdb
spring.h2.console.enabled=true
#spring.h2.console.path=/h2

spring.jpa.defer-datasource-initialization = true
spring.jpa.hibernate.ddl-auto = create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.sql.init.mode=always

jwt.secret=jnhferwfjroi2565767843565hghhnyu576t5grf5t546875654dghfdhb