
logging.level.org.springframework=info
spring.datasource.url=jdbc:mysql://localhost:3306/jbdl27_jpa?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=1234
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true

**********************************
show databases;
create database jbdl27;
use jbdl27;
show tables;
desc L5_attendance;

**********************************
https protocol run on port 443
jdbc protocol runs on 3306
Tomcat apache server runs on port 8080

*************************
spring-boot-starter-web dependency contains the tomcat apache server.. without this dependency.. application will not
work as server and will stop

It has spring boot starter dependency as parent..

If we remove both above dependencies then our program will act as normal java application
*****************************************

Spring boot has autoconfiguration jar.. this was not in spring..
inside this jar we have spring configuration metadata.json
in this there arre properties defined such as server.port

spring boot has this feature of auto configuration.. which spring does  not have
if i want to change port for http server,, i can do easily in spring boot.. by just defining server port in properties file
means i can configure properties easily in spring boot..



custom property-> propert not present in spring boot autoconfigure jar or inside it spring configuration metadata.json
inbuilt properties are present in above jar

in application.properties..
server.port=7070

there is a class ServerProperty inside this jar..
in this class we have instance variable .. port..
then we have setPort[] and getPort() setters and getters

-------
in spring boot we can create beans just by giving annotatios..
but in spring we have to use long xmls to create beans
*****************************

 // API
    // 1. Method
    // 2. Request
    // 3. Response
    // 4. Endpoint

    // HTTP server
    // HTTP Methods

	//types of api==rest api and soap api
    /** Characteristics of rest APIs
        * Data can be in any format
        * Stateless or idempotent
     **/

    /**
        Soap APIs depends on the state, they are not stateless
     **/

    /**    /** types of api request methods or http methods (this is not type of api)
        1. GET --> A method which is used to retrieve some response from the BE -- Safe method

        2. POST --> A method which is used to save/store some data on the BE    -- Unsafe method
        3. PUT --> A method which is used to update the details on BE           -- Unsafe method
        4. DELETE --> A method which is used to delete some data on the BE      -- Unsafe method
        5. PATCH, HEAD, OPTIONS
     **/

    /**  Comparison b/w Spring web and Jax-rs
          Spring web                   Jax-rs
          GetMapping                   GET
          RequestParam                 QueryParam
          PathVariable                 PathParam

     **/

    // spring web - @RequestParam
    // jax-rs - @QueryParam

//    @RequestMapping(method = RequestMethod.GET)

************************************************************
  /** HTTP Status code
     * 200 -- OK
     * 500 -- Internal server error
     * 401 -- Unauthorized / Unauthenticated - Invalid entity / user (Spring security)
     * 403 -- Forbidden access - Valid entity but the operation you are trying to do is forbidden (Spring security)
     * 404 -- Not found (Trying to access something which is not present as a resource / API in your server )
     * 405 -- HTTP method not allowed
     **/
**************************************************