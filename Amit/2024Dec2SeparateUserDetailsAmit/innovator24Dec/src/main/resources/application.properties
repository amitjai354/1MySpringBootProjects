spring.application.name=innovator24Dec

spring.h2.console.enabled = true

#spring.datasource.url=jdbc:h2:mem:testdb;NON_KEYWORDS=user : if table name User then not creating table
# ; Separates the database name from additional connection options.
# NON_KEYWORDS=user: This option tells H2 to treat "user" as a non-keyword. This is typically used when 
#you have a table or column named "user" in your schema, which is a reserved keyword in some SQL standards
#and could lead to syntax errors without this option. By adding NON_KEYWORDS=user, you are explicitly 
#allowing the use of "user" as an identifier without requiring it to be quoted in SQL queries.
spring.datasource.url = jdbc:h2:mem:testdb

spring.datasource.driverClassName = org.h2.Driver
spring.datasource.username = sa
spring.jpa.database-platform = org.hibernate.dialect.H2Dialect
spring.devtools.restart.enabled = true

server.port = 8081



#you can omit the 'spring.datasource.driverClassName property' If you are using an embedded H2 database 
#and Spring Boot's auto-configuration is working correctly, However, including it is a good practice 
#for clarity and potential troubleshooting.
#In summary, while not always mandatory, explicitly setting the driver class name is often recommended, 
#especially in more complex applications or when you need greater control over your database configuration.


#spring.datasource.username = sa
#Database Authentication:
#If your database requires a username and password for access, you must provide these credentials. 
#spring.datasource.username = sa specifies the username, which in this case is "sa".
#Default Username:
#If your database server has a default username of "sa", and you intend to use it, then providing 
#spring.datasource.username = sa is necessary.
#When it might not be necessary:
#In-Memory Database:
#If you are using an in-memory database (like H2) for development purposes, it might not require explicit 
#username/password configuration.
#Custom User Details:
#If you have implemented custom user details using Spring Security (or another authentication mechanism) 
#and are not relying on database authentication for user management, then the spring.datasource.username 
#property is not directly related to your application's user details.


#org.hibernate.dialect.H2Dialect
#What does it do?
#Hibernate Dialect:
#This property tells Spring Data JPA (which uses Hibernate as the default implementation) which SQL dialect 
#to use for the database.
#H2Dialect:
#Specifically, org.hibernate.dialect.H2Dialect is the dialect for the H2 in-memory database.
#When is it typically used?
#In-memory H2 Database:
#When using an in-memory H2 database for development or testing, explicitly setting the dialect is a good practice.
#Non-Standard Configurations:
#If you have a complex database setup or use a custom database driver, specifying the dialect can be necessary.
#When is it not needed?
#Standard Database and Driver:
#If you are using a common database with a standard driver and Spring Boot can detect it correctly, you might
# not need to explicitly specify the dialect.
#Hibernate 6:
#Hibernate 6 has improved dialect handling, making explicit configuration less necessary in many cases.


#While not mandatory, spring.devtools.restart.enabled = true (or its default behavior) is highly beneficial for
# development, as it provides automatic restarts. However, it must be disabled in production environments.
#When set to true, the application automatically restarts whenever changes are detected in the classpath 
#(e.g., modified Java files or resources).
#This significantly speeds up development by eliminating the need to manually restart the application after 
#every code change.


#till here given in exam......... 

#spring.h2.console.path=/h2
spring.jpa.hibernate.ddl-auto=create
spring.jpa.defer-datasource-initialization=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.sql.init.mode = always

#jwt.secret=jnhferwfjroi2565767843565hghhnyu576t5grf5t546875654dghfdhb
